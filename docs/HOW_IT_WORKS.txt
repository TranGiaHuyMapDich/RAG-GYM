╔══════════════════════════════════════════════════════════════════╗
║                                                                  ║
║              🏋️ GYM RAG AI - CÁCH HOẠT ĐỘNG 🔧                   ║
║                                                                  ║
╚══════════════════════════════════════════════════════════════════╝


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎯 TỔNG QUAN HỆ THỐNG
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

┌─────────────────────────────────────────────────────────────────┐
│                        BROWSER (Frontend)                       │
├─────────────────────────────────────────────────────────────────┤
│  1. User mở http://localhost:8000                               │
│  2. Load HTML, CSS, JavaScript                                  │
│  3. JavaScript check localStorage → Có user_id?                 │
│     ├─ CÓ  → Hiển thị: ✅ Đã đăng nhập                          │
│     └─ KHÔNG → Hiển thị: ⚠️ Chưa đăng nhập                      │
│                                                                 │
│  4. User tương tác (chat, tạo plan, v.v.)                       │
│  5. JavaScript gọi API với user_id (nếu có)                     │
│  6. Nhận response → Hiển thị kết quả                            │
│  7. Hiển thị notification (nếu data được lưu)                   │
└─────────────────────────────────────────────────────────────────┘
                              ↓ ↑
                         HTTP Requests
                              ↓ ↑
┌─────────────────────────────────────────────────────────────────┐
│                     BACKEND (FastAPI - Python)                  │
├─────────────────────────────────────────────────────────────────┤
│  1. Nhận request từ frontend                                    │
│  2. Parse request body (question, user_id, v.v.)                │
│                                                                 │
│  ┌─────────────────────────────────────────────────┐            │
│  │  RAG PROCESSING (rag_system_simple.py)          │            │
│  ├─────────────────────────────────────────────────┤            │
│  │  1. Load megaGymDataset.csv                     │            │
│  │  2. Convert text → embeddings                   │            │
│  │  3. User question → embedding                   │            │
│  │  4. Tìm exercises tương tự (cosine similarity)  │            │
│  │  5. Tạo response từ top results                 │            │
│  └─────────────────────────────────────────────────┘            │
│                                                                 │
│  3. Nếu có user_id → Lưu vào database                           │
│  4. Return response về frontend                                 │
└─────────────────────────────────────────────────────────────────┘
                              ↓ ↑
                     Supabase Client (Python SDK)
                              ↓ ↑
┌─────────────────────────────────────────────────────────────────┐
│                    DATABASE (Supabase)                          │
├─────────────────────────────────────────────────────────────────┤
│  PostgreSQL Tables:                                             │
│  ├─ users                (User profiles)                        │
│  ├─ workout_plans        (Saved plans)                          │
│  ├─ chat_history         (Chat logs)                            │
│  ├─ favorite_exercises   (Favorites)                            │
│  ├─ progress_tracking    (Body measurements)                    │
│  ├─ workout_sessions     (Session logs)                         │
│  └─ user_settings        (Preferences)                          │
│                                                                 │
│  RLS Policies:                                                  │
│  ├─ Users can only see their own data                           │
│  └─ Auto-update timestamps                                      │
└─────────────────────────────────────────────────────────────────┘


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
💬 LUỒNG CHAT
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

User hỏi: "Bài tập ngực cho người mới"

┌─────────────┐
│   BROWSER   │
└──────┬──────┘
       │ 1. User nhập câu hỏi và click Send
       │
       ▼
┌─────────────────────────────────────────────┐
│  JavaScript (script.js)                     │
│  ├─ Get question from input                 │
│  ├─ Get user_id from localStorage           │
│  ├─ Get session_id from localStorage        │
│  └─ Prepare request payload                 │
└──────┬──────────────────────────────────────┘
       │ 2. POST /api/chat
       │    {
       │      question: "Bài tập ngực cho người mới",
       │      n_results: 5,
       │      user_id: "uuid",
       │      session_id: "uuid"
       │    }
       │
       ▼
┌─────────────────────────────────────────────┐
│  Backend (app.py)                           │
│  ├─ Nhận request                            │
│  ├─ Validate data (Pydantic)                │
│  └─ Call RAG system                         │
└──────┬──────────────────────────────────────┘
       │ 3. Query RAG
       │
       ▼
┌─────────────────────────────────────────────┐
│  RAG System (rag_system_simple.py)          │
│  ├─ Encode question → embedding             │
│  ├─ Search similar exercises                │
│  ├─ Calculate cosine similarity             │
│  ├─ Get top 5 results                       │
│  └─ Format response                         │
└──────┬──────────────────────────────────────┘
       │ 4. Return exercises list
       │
       ▼
┌─────────────────────────────────────────────┐
│  Backend (app.py)                           │
│  ├─ Format response                         │
│  │                                           │
│  └─ IF user_id present:                     │
│      ├─ Call supabase_client.save_chat()    │
│      └─ Save to chat_history table          │
└──────┬──────────────────────────────────────┘
       │ 5. Save to database (if user logged in)
       │
       ▼
┌─────────────────────────────────────────────┐
│  Supabase Database                          │
│  INSERT INTO chat_history                   │
│  (user_id, session_id, user_message,        │
│   ai_response, exercises_suggested,         │
│   context_used, created_at)                 │
│  VALUES (...)                               │
└──────┬──────────────────────────────────────┘
       │ 6. Return success
       │
       ▼
┌─────────────────────────────────────────────┐
│  Backend (app.py)                           │
│  Return response to frontend:               │
│  {                                          │
│    answer: "Đây là các bài tập...",         │
│    exercises: [...],                        │
│    context: "..."                           │
│  }                                          │
└──────┬──────────────────────────────────────┘
       │ 7. HTTP Response
       │
       ▼
┌─────────────────────────────────────────────┐
│  JavaScript (script.js)                     │
│  ├─ Receive response                        │
│  ├─ Display answer in chat                  │
│  ├─ Display exercises                       │
│  └─ Show notification:                      │
│     "✅ Đã lưu vào database!"                │
└──────┬──────────────────────────────────────┘
       │ 8. Update UI
       │
       ▼
┌─────────────┐
│   BROWSER   │
│   (Updated) │
└─────────────┘


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📋 LUỒNG TẠO WORKOUT PLAN
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

User điền form: Mesomorph, Intermediate, Muscle Gain, 4 days/week

┌─────────────┐
│   BROWSER   │
└──────┬──────┘
       │ 1. User fill form và click Tạo kế hoạch
       │
       ▼
┌─────────────────────────────────────────────┐
│  JavaScript (script.js)                     │
│  ├─ Get form data (body_type, level, v.v.)  │
│  ├─ Get user_id from localStorage           │
│  ├─ Generate plan_name                      │
│  └─ Prepare request                         │
└──────┬──────────────────────────────────────┘
       │ 2. POST /api/workout-plan
       │    {
       │      body_type: "mesomorph",
       │      fitness_level: "Intermediate",
       │      goals: "muscle_gain",
       │      days_per_week: 4,
       │      height: 170,
       │      weight: 70,
       │      age: 25,
       │      user_id: "uuid",
       │      plan_name: "Plan 21/10/2025"
       │    }
       │
       ▼
┌─────────────────────────────────────────────┐
│  Backend (app.py)                           │
│  ├─ Validate request                        │
│  ├─ Calculate BMI                           │
│  ├─ Determine plan parameters:              │
│  │   ├─ Reps range (based on goals)         │
│  │   ├─ Sets (based on level)               │
│  │   ├─ Rest time                           │
│  │   └─ Exercises per day                   │
│  │                                           │
│  └─ Generate weekly schedule                │
└──────┬──────────────────────────────────────┘
       │ 3. For each day in week:
       │
       ▼
┌─────────────────────────────────────────────┐
│  Plan Generation Logic                      │
│  ├─ Determine body parts for day            │
│  │   (e.g., Day 1: Chest + Triceps)         │
│  │                                           │
│  ├─ For each body part:                     │
│  │   ├─ Query RAG for exercises             │
│  │   ├─ Filter by level                     │
│  │   ├─ Filter by equipment                 │
│  │   └─ Get top exercises                   │
│  │                                           │
│  └─ Create structured plan                  │
└──────┬──────────────────────────────────────┘
       │ 4. Plan created
       │
       ▼
┌─────────────────────────────────────────────┐
│  Backend (app.py)                           │
│  IF user_id present:                        │
│    ├─ Call supabase_client.save_workout()   │
│    └─ Save to workout_plans table           │
└──────┬──────────────────────────────────────┘
       │ 5. Save to database
       │
       ▼
┌─────────────────────────────────────────────┐
│  Supabase Database                          │
│  INSERT INTO workout_plans                  │
│  (user_id, plan_name, body_type,            │
│   fitness_level, primary_goal,              │
│   days_per_week, plan_data, created_at)     │
│  VALUES (...)                               │
│  RETURNING id                               │
└──────┬──────────────────────────────────────┘
       │ 6. Return saved_plan_id
       │
       ▼
┌─────────────────────────────────────────────┐
│  Backend (app.py)                           │
│  Add saved_plan_id to response:             │
│  {                                          │
│    bmi: 24.2,                               │
│    days_per_week: 4,                        │
│    weekly_schedule: [...],                  │
│    saved_plan_id: "uuid"  ← Added!          │
│  }                                          │
└──────┬──────────────────────────────────────┘
       │ 7. HTTP Response
       │
       ▼
┌─────────────────────────────────────────────┐
│  JavaScript (script.js)                     │
│  ├─ Receive response                        │
│  ├─ Display plan (BMI, schedule, v.v.)      │
│  │                                           │
│  └─ IF saved_plan_id present:               │
│      └─ Show notification:                  │
│         "✅ Kế hoạch đã được lưu!"           │
└──────┬──────────────────────────────────────┘
       │ 8. Update UI
       │
       ▼
┌─────────────┐
│   BROWSER   │
│   (Updated) │
└─────────────┘


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
👤 LUỒNG USER REGISTRATION
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

User click "Đăng ký nhanh"

┌─────────────┐
│   BROWSER   │
└──────┬──────┘
       │ 1. Click "Đăng ký nhanh" button
       │
       ▼
┌─────────────────────────────────────────────┐
│  JavaScript - quickRegister()               │
│  ├─ Prompt user for email                   │
│  └─ Prompt user for name                    │
└──────┬──────────────────────────────────────┘
       │ 2. POST /api/users
       │    {
       │      email: "test@gym.com",
       │      full_name: "Test User",
       │      body_type: "mesomorph",
       │      fitness_level: "Beginner",
       │      primary_goal: "general_fitness"
       │    }
       │
       ▼
┌─────────────────────────────────────────────┐
│  Backend (app.py)                           │
│  ├─ Validate email format                   │
│  ├─ Call supabase_client.create_user()      │
│  └─ Pass user data to Supabase              │
└──────┬──────────────────────────────────────┘
       │ 3. Create user
       │
       ▼
┌─────────────────────────────────────────────┐
│  Supabase Database                          │
│  INSERT INTO users                          │
│  (id, email, full_name, body_type,          │
│   fitness_level, primary_goal, created_at)  │
│  VALUES (gen_random_uuid(), ...)            │
│  RETURNING *                                │
└──────┬──────────────────────────────────────┘
       │ 4. Return user object (with UUID)
       │
       ▼
┌─────────────────────────────────────────────┐
│  Backend (app.py)                           │
│  Return response:                           │
│  {                                          │
│    success: true,                           │
│    user: {                                  │
│      id: "uuid-generated-by-db",            │
│      email: "test@gym.com",                 │
│      full_name: "Test User",                │
│      ...                                    │
│    }                                        │
│  }                                          │
└──────┬──────────────────────────────────────┘
       │ 5. HTTP Response
       │
       ▼
┌─────────────────────────────────────────────┐
│  JavaScript - quickRegister()               │
│  ├─ Extract user.id from response           │
│  ├─ Call setUserId(user.id)                 │
│  │   ├─ CURRENT_USER_ID = user.id           │
│  │   └─ localStorage.setItem('userId', id)  │
│  │                                           │
│  ├─ Call updateUserStatus()                 │
│  │   └─ Update header UI                    │
│  │                                           │
│  └─ Show notification:                      │
│      "✅ Đăng ký thành công!"                │
└──────┬──────────────────────────────────────┘
       │ 6. Update UI
       │
       ▼
┌─────────────────────────────────────────────┐
│  BROWSER - Header Updated                   │
│  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━  │
│  ✅ Đã đăng nhập  [Đăng xuất] [Dữ liệu...]  │
│  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━  │
└─────────────────────────────────────────────┘


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📊 LUỒNG VIEW SAVED DATA
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

User click "Dữ liệu của tôi"

┌─────────────┐
│   BROWSER   │
└──────┬──────┘
       │ 1. Click "Dữ liệu của tôi" button
       │
       ▼
┌─────────────────────────────────────────────┐
│  JavaScript - viewMyData()                  │
│  ├─ Check CURRENT_USER_ID                   │
│  │   └─ If null → Show error                │
│  │                                           │
│  └─ Parallel API calls:                     │
│      ├─ GET /api/users/{id}/stats           │
│      ├─ GET /api/users/{id}/workout-plans   │
│      └─ GET /api/users/{id}/favorites       │
└──────┬──────────────────────────────────────┘
       │ 2. Multiple GET requests
       │
       ▼
┌─────────────────────────────────────────────┐
│  Backend (app.py)                           │
│  For each endpoint:                         │
│  ├─ Validate user_id                        │
│  ├─ Call respective Supabase function       │
│  └─ Return data                             │
└──────┬──────────────────────────────────────┘
       │ 3. Query database
       │
       ▼
┌─────────────────────────────────────────────┐
│  Supabase Database                          │
│                                             │
│  Stats:                                     │
│    SELECT COUNT(*) FROM workout_plans       │
│      WHERE user_id = ?                      │
│    SELECT COUNT(*) FROM favorite_exercises  │
│      WHERE user_id = ?                      │
│    ...                                      │
│                                             │
│  Plans:                                     │
│    SELECT * FROM workout_plans              │
│      WHERE user_id = ?                      │
│      ORDER BY created_at DESC               │
│                                             │
│  Favorites:                                 │
│    SELECT * FROM favorite_exercises         │
│      WHERE user_id = ?                      │
└──────┬──────────────────────────────────────┘
       │ 4. Return data
       │
       ▼
┌─────────────────────────────────────────────┐
│  JavaScript - viewMyData()                  │
│  ├─ Receive all responses                   │
│  ├─ Build HTML for modal:                   │
│  │   ├─ Stats cards                         │
│  │   ├─ Plans list                          │
│  │   └─ Favorites list                      │
│  │                                           │
│  ├─ Create modal element                    │
│  ├─ Create overlay element                  │
│  └─ Append to document.body                 │
└──────┬──────────────────────────────────────┘
       │ 5. Show modal
       │
       ▼
┌─────────────────────────────────────────────┐
│  BROWSER - Modal Displayed                  │
│  ╔════════════════════════════════════════╗ │
│  ║ 📊 Dữ Liệu Của Bạn                     ║ │
│  ╠════════════════════════════════════════╣ │
│  ║ [5 Plans]    [12 Favorites]            ║ │
│  ║                                        ║ │
│  ║ 📋 Kế hoạch đã lưu:                    ║ │
│  ║ ┌────────────────────────────────────┐ ║ │
│  ║ │ Plan 21/10/2025                    │ ║ │
│  ║ │ 4 ngày/tuần - 21/10/2025           │ ║ │
│  ║ └────────────────────────────────────┘ ║ │
│  ║        [Đóng]                          ║ │
│  ╚════════════════════════════════════════╝ │
└─────────────────────────────────────────────┘


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🔐 DATA PERSISTENCE
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

LocalStorage (Browser):
  ┌────────────────────────────────┐
  │ Key: userId                    │
  │ Value: "uuid-from-database"    │
  ├────────────────────────────────┤
  │ Key: sessionId                 │
  │ Value: "uuid-generated"        │
  └────────────────────────────────┘
  
  → Persistent across page refreshes
  → Cleared when user clicks "Đăng xuất"
  → Cleared when localStorage.clear()

Supabase (Database):
  ┌────────────────────────────────┐
  │ users                          │
  │ ├─ id (UUID)                   │
  │ ├─ email                       │
  │ ├─ full_name                   │
  │ └─ created_at                  │
  ├────────────────────────────────┤
  │ workout_plans                  │
  │ ├─ id (UUID)                   │
  │ ├─ user_id (FK)                │
  │ ├─ plan_data (JSONB)           │
  │ └─ created_at                  │
  ├────────────────────────────────┤
  │ chat_history                   │
  │ ├─ id (UUID)                   │
  │ ├─ user_id (FK)                │
  │ ├─ user_message                │
  │ ├─ ai_response                 │
  │ └─ created_at                  │
  └────────────────────────────────┘

  → Persistent forever
  → Accessible from any device (với user_id)
  → Secured with RLS policies


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎨 UI COMPONENTS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

User Status Bar:
  <div id="user-status">
    → Renders different HTML based on CURRENT_USER_ID
    → updateUserStatus() called on:
      - Page load
      - After registration
      - After logout

Toast Notification:
  showNotification(message, type)
    → Creates <div> element
    → Styles with inline CSS
    → Appends to document.body
    → Auto-removes after 3 seconds
    → Animation: slideIn → slideOut

Data Modal:
  viewMyData()
    → Fetches data from API
    → Builds HTML string
    → Creates modal + overlay elements
    → Appends to document.body
    → closeMyData() removes elements


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🧠 RAG SYSTEM
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Initialization:
  1. Load megaGymDataset.csv (2900+ exercises)
  2. Load Sentence Transformer model
  3. Encode all exercises → embeddings
  4. Store embeddings in memory (numpy array)

Query Process:
  1. User question → text
  2. Encode question → embedding (vector)
  3. Calculate cosine similarity:
     similarity = dot(query_embedding, exercise_embeddings)
  4. Sort by similarity (highest first)
  5. Return top N exercises
  6. Format results for display

Why This Works:
  → Semantic understanding (not keyword matching)
  → "bài tập ngực" ≈ "chest exercises" ≈ "pectoral workout"
  → Fast in-memory search (no database)
  → Pre-computed embeddings (one-time cost)


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📈 PERFORMANCE
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Startup Time:
  ├─ Load dataset: ~500ms
  ├─ Load model: ~2s (first time)
  ├─ Generate embeddings: ~10s (first time, then cached)
  └─ Start server: ~500ms
  Total: ~13s first run, ~3s subsequent runs

Request Times:
  ├─ Chat (RAG query): 1-3s
  │   ├─ Encode question: ~100ms
  │   ├─ Search: ~50ms
  │   └─ Format response: ~50ms
  │
  ├─ Workout plan: 2-5s
  │   ├─ Multiple RAG queries: ~1s
  │   └─ Plan generation: ~1s
  │
  └─ Database save: 200-500ms
      ├─ Network latency: ~50ms
      └─ Supabase processing: ~150ms

Optimizations:
  ✅ Embeddings cached in memory
  ✅ Fast cosine similarity (numpy)
  ✅ Async database calls
  ✅ LocalStorage for user_id (no auth overhead)


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

           ✨ THAT'S HOW GYM RAG AI WORKS! 🎯

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Version: 2.0
Date: October 21, 2025

